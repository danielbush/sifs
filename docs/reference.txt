  Functions (RESERVED names)
  -------------------------------------------------------------------------------

  hh                         - Output this help message.  General SIFS reference.
  sifs.quickstart            - Setting up and using SIFS.
  sifs.readme                - General explanation & philosophy
  sifs.help                  - Guidelines, ideas for editing a sif file.
                               

  i            Re-source the current include file and print its location
  d            Change sifs location (SIFS_DIR). 'c' will run this
               automatically if SIFS_DIR is not set.
  c            Source an include file from SIFS_DIR
  c </path/to/name.sif>
               At the moment, this is the raw routine called by 'sif'.
               <> has to be absolute and include the .sif suffix.
               Will set SIFS_DIR.  See implementation of j() for why SIFS_DIR
               is set.
  j            Select a previous SIF file;
               Uses SIFS_HISTFILE.  Prior to this up to 9 unique were stored
               in the shell session.
  sif 
    <name>
               Looks for SIFS_DIR/<name>.sif
               This is similar to typing 'c' and then selecting from 
               available sif files in your current SIFS_DIR.
               This first option may be deprecated in future.
    </path/to/name.sif> 
               Looks for looks for actual file
    <pattern>  Failing the above two, returns a selection of all available
               sif files matching pattern.

               Like 'c <...>', sets SIFS_DIR.
  e            Edit the current included file.
  r            Reset sifs and your shell; basically set HOME to OLD_HOME (your original HOME).
  rc           shortcut for running 'r' then 'c'; use this to change to a sif
               file in a different sif repo to your current one.
               The main point of 'r' and 'rc' is that they currently reset HOME if the
               current sifs file has changed it.  Otherwise use 'd'.




  LOCAL SIF FILES
  -------------------------------------------------------------------------------
  These are files not in a centralised SIFS_DIR and are often loaded
  over an existing sif file.
  cl           Look for local sif files in LOCAL_SIF_ROOT instead of SIFS_DIR
               Allow user to load; sets LOCAL_SIF.
  il           Re-source LOCAL_SIF if it is set; 
               type 'i' to reload the actual sif file over whatever the
               LOCAL_SIF was.  'il' will then reload the local file again etc  
  el           Edit local sif file if LOCAL_SIF is set.




  HOPPING BETWEEN LOCATIONS ON THE COMMAND-LINE
  -------------------------------------------------------------------------------
  The following g/m functions are to help you jump about from one location to another.
  m <char>     store current directory in a variable \$STASH_<char>
  m -          clear (unset) all \$STASH_<char>
  g            view all STASH variables
  g <char>     cd to \$STASH_<char>
  gg           Go to STASH_LAST; STASH_LAST is set to your current location by 'g <char>' command
               prior to moving you.
  If you've enabled dot_commands (default) and bash supports 
  command_not_found_handle(), then you will also have the following shortcuts:
  .<char>      same as: g <char>
  ,<char>      same as: m <char>


  OTHER sifs.* FUNCTIONS
  -------------------------------------------------------------------------------
  sifs.go <path> <pattern>   - look for file or dir with <pattern> under <path>
                               Edit if file; cd if dir.
                               Use in your own go() functions.
                                 go() {
                                   sifs.go $MY_HOME $1
                                 }
                               If <pattern> is a dir or path in its own right
                               then <path> is ignored.
  sifs.go.select             - select previous locations/files made with sifs.go.
  gohist                     - a shortcut for sifs.go.select
  sifs.sys                   - cd to SIFS_HOME 
  sifs.dir                   - cd to SIFS_DIR  (if you want to delete a file etc) 
  sifs.conf                  - Edit SIFS_CONF
  sifs.template              - Print sifs template to stdout
  sifs.template [file_name]  - Create a sif file using sifs template in current directory
  sifs.edit                  - Edit the SIFS_HOME/sifs.sh
  sifs.add file_name         - runs sifs.template and outputs to \$SIFS_DIR\file_name.sif
  sifs.doc                   - View the docs/reference.txt file; uses 'less'
  sifs.histfile [file_name]  - Add file_name to SIFS_HISTFILE. Assumes full path.
  sifs.histfile.clear        - Clear SIFS_HISTFILE
  sifs.ls                    - List .sif files in SIFS_DIR and any subdirectories.
                               Used by the 'c' command.
  sifs.mkdir dir_name        - Makes a directory under SIFS_DIR              
  sifs.up                    - Changes SIFS_DIR to SIFS_DIR/..
                               No checking is done; use this only if you have SIFS_DIR set
                               to a subdir of the "sifs.conf-defined" SIFS_DIR.


  SIL FILES - simple include library files
  -------------------------------------------------------------------------------
  Use sil files for general routines, global variables shared between several
  sif files.

  Sil files are usually namespaced or written in a way that they 
  don't clash with the current sif file you are using.
  For instance, you could define a global go() function in a sil
  file and have one or more sifs load the sil file and share
  this function.
  Or you could namespace the go function eg abc.go() and have
  your your normal sif go() function call abc.go().

  Try to keep your sil file names unique.  This way you can say
     sil <name>
  instead of
     sil </path/to/name.sil>
  sil <name> will return the first sil found if more than one.



  sil
    <name> - find and load <name>.sil
    </path/to/name.sil> - find and load fully specified filename.

  sil.find
    <> - find all sil files
    <pattern> - find all matching pattern

  sil.edit
    <> - find all sil files and allow you to edit one or more

  sil.add <name>
    Add <name>.sil to current SIFS_DIR.

  sil.show
    Show all sil files and allow you to re-source one of them.

  FIXME/TODO
  sil.all should list all sil files.  sil.show/edit should work
  on current sil files.
